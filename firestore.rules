/**
 * @fileoverview Firestore Security Rules for Hermes Mail.
 *
 * Core Philosophy:
 * This ruleset enforces a strict user-ownership model. Only the authenticated user
 * can read and write their own data. Data is organized under user-specific paths
 * to simplify authorization logic and eliminate the need for denormalization.
 *
 * Data Structure:
 * - /users/{userId}: Stores user profiles, with 'userId' matching the Firebase Auth UID.
 * - /users/{userId}/emails/{emailId}: Stores emails owned by a specific user.
 * - /users/{userId}/labels/{labelId}: Stores labels created by a specific user.
 *
 * Key Security Decisions:
 * - User listing is implicitly denied (no top-level `list` on `/users`).
 * - All write operations require user authentication (`request.auth != null`).
 * - Relational integrity is enforced on create operations to link documents to their owners.
 */
rules_version = '2';
service cloud.firestore {
  match /databases/{database}/documents {

    /**
     * @description Controls access to user profile documents.
     * @path /users/{userId}
     * @allow (create) - Authenticated user can create their own profile, with user ID matching auth UID.
     * @allow (get, update, delete) - Authenticated user can read, update, and delete their own profile.
     * @deny (create) - If the user ID does not match the auth UID.
     * @deny (get, update, delete) - If the user is not authenticated or user ID does not match auth UID.
     * @principle Enforces document ownership for all operations.
     */
    match /users/{userId} {
      function isSignedIn() {
        return request.auth != null;
      }

      function isOwner(userId) {
        return request.auth.uid == userId;
      }

      allow get: if isSignedIn() && isOwner(userId);
      allow list: if false;
      allow create: if isSignedIn() && isOwner(userId) && request.resource.data.id == request.auth.uid;
      allow update: if isSignedIn() && isOwner(userId) && resource.data.id == request.resource.data.id;
      allow delete: if isSignedIn() && isOwner(userId) && resource != null;
    }

    /**
     * @description Controls access to email documents for a specific user.
     * @path /users/{userId}/emails/{emailId}
     * @allow (create) - Authenticated user can create emails under their own user ID.
     * @allow (get, list, update, delete) - Authenticated user can read, list, update, and delete their own emails.
     * @deny (create, get, list, update, delete) - If the user is not authenticated or user ID does not match.
     * @principle Restricts access to a user's own email data.
     */
    match /users/{userId}/emails/{emailId} {
      function isSignedIn() {
        return request.auth != null;
      }

      function isOwner(userId) {
        return request.auth.uid == userId;
      }

      allow get: if isSignedIn() && isOwner(userId);
      allow list: if isSignedIn() && isOwner(userId);
      allow create: if isSignedIn() && isOwner(userId) && request.resource.data.userId == userId;
      allow update: if isSignedIn() && isOwner(userId) && resource != null && resource.data.userId == request.resource.data.userId;
      allow delete: if isSignedIn() && isOwner(userId) && resource != null;
    }

    /**
     * @description Controls access to label documents for a specific user.
     * @path /users/{userId}/labels/{labelId}
     * @allow (create) - Authenticated user can create labels under their own user ID.
     * @allow (get, list, update, delete) - Authenticated user can read, list, update, and delete their own labels.
     * @deny (create, get, list, update, delete) - If the user is not authenticated or user ID does not match.
     * @principle Restricts access to a user's own label data.
     */
    match /users/{userId}/labels/{labelId} {
      function isSignedIn() {
        return request.auth != null;
      }

      function isOwner(userId) {
        return request.auth.uid == userId;
      }

      allow get: if isSignedIn() && isOwner(userId);
      allow list: if isSignedIn() && isOwner(userId);
      allow create: if isSignedIn() && isOwner(userId) && request.resource.data.userId == userId;
      allow update: if isSignedIn() && isOwner(userId) && resource != null && resource.data.userId == request.resource.data.userId;
      allow delete: if isSignedIn() && isOwner(userId) && resource != null;
    }
  }
}