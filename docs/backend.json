{
  "entities": {
    "User": {
      "$schema": "http://json-schema.org/draft-07/schema#",
      "title": "User",
      "type": "object",
      "description": "Represents a user of the Hermes Mail application.",
      "properties": {
        "id": {
          "type": "string",
          "description": "Unique identifier for the User entity."
        },
        "googleId": {
          "type": "string",
          "description": "The user's Google ID, obtained through Google OAuth."
        },
        "email": {
          "type": "string",
          "description": "The user's email address.",
          "format": "email"
        },
        "name": {
          "type": "string",
          "description": "The user's display name."
        }
      },
      "required": [
        "id",
        "googleId",
        "email",
        "name"
      ]
    },
    "Email": {
      "$schema": "http://json-schema.org/draft-07/schema#",
      "title": "Email",
      "type": "object",
      "description": "Represents an email message.",
      "properties": {
        "id": {
          "type": "string",
          "description": "Unique identifier for the Email entity."
        },
        "userId": {
          "type": "string",
          "description": "Reference to the User who owns this email. (Relationship: User 1:N Email)"
        },
        "gmailId": {
          "type": "string",
          "description": "The ID of the email as stored in Gmail."
        },
        "subject": {
          "type": "string",
          "description": "The subject line of the email."
        },
        "sender": {
          "type": "string",
          "description": "The email address of the sender."
        },
        "recipient": {
          "type": "string",
          "description": "The email address of the recipient."
        },
        "date": {
          "type": "string",
          "description": "The date and time the email was sent.",
          "format": "date-time"
        },
        "body": {
          "type": "string",
          "description": "The HTML content of the email body."
        },
        "isRead": {
          "type": "boolean",
          "description": "Indicates whether the email has been read."
        },
        "isStarred": {
          "type": "boolean",
          "description": "Indicates whether the email is starred."
        },
        "labelIds": {
          "type": "array",
          "description": "References to Labels. (Relationship: Label N:N Email)",
          "items": {
            "type": "string"
          }
        }
      },
      "required": [
        "id",
        "userId",
        "gmailId",
        "subject",
        "sender",
        "recipient",
        "date",
        "body",
        "isRead",
        "isStarred"
      ]
    },
    "Label": {
      "$schema": "http://json-schema.org/draft-07/schema#",
      "title": "Label",
      "type": "object",
      "description": "Represents a Gmail label (folder).",
      "properties": {
        "id": {
          "type": "string",
          "description": "Unique identifier for the Label entity."
        },
        "userId": {
          "type": "string",
          "description": "Reference to the User who created this label. (Relationship: User 1:N Label)"
        },
        "gmailId": {
          "type": "string",
          "description": "The ID of the label as stored in Gmail."
        },
        "name": {
          "type": "string",
          "description": "The name of the label."
        },
        "type": {
          "type": "string",
          "description": "The type of the label (e.g., 'user', 'system')."
        }
      },
      "required": [
        "id",
        "userId",
        "gmailId",
        "name",
        "type"
      ]
    }
  },
  "auth": {
    "providers": [
      "password",
      "anonymous"
    ]
  },
  "firestore": {
    "structure": [
      {
        "path": "/users/{userId}",
        "definition": {
          "entityName": "User",
          "schema": {
            "$ref": "#/backend/entities/User"
          },
          "description": "Stores user profiles. The 'userId' parameter corresponds to the Firebase Auth UID.",
          "params": [
            {
              "name": "userId",
              "description": "The Firebase Auth UID of the user."
            }
          ]
        }
      },
      {
        "path": "/users/{userId}/emails/{emailId}",
        "definition": {
          "entityName": "Email",
          "schema": {
            "$ref": "#/backend/entities/Email"
          },
          "description": "Stores emails belonging to a specific user.  Path-based ownership ensures only the user can access these emails.",
          "params": [
            {
              "name": "userId",
              "description": "The Firebase Auth UID of the user who owns the email."
            },
            {
              "name": "emailId",
              "description": "The unique ID of the email."
            }
          ]
        }
      },
      {
        "path": "/users/{userId}/labels/{labelId}",
        "definition": {
          "entityName": "Label",
          "schema": {
            "$ref": "#/backend/entities/Label"
          },
          "description": "Stores labels created by a specific user. Path-based ownership ensures only the user can access these labels.",
          "params": [
            {
              "name": "userId",
              "description": "The Firebase Auth UID of the user who created the label."
            },
            {
              "name": "labelId",
              "description": "The unique ID of the label."
            }
          ]
        }
      }
    ],
    "reasoning": "The Firestore structure is designed to reflect the relationships between users, emails, and labels in the Hermes Mail application, while prioritizing authorization independence and secure data access.  The core principle is path-based ownership for private user data, ensuring that only the user can access their own emails and labels.\n\nThe `/users/{userId}` collection stores user profiles. This structure enables simple security rules based on `request.auth.uid == userId`.  Emails and Labels are stored as subcollections under each user (`/users/{userId}/emails/{emailId}` and `/users/{userId}/labels/{labelId}`), which enforces ownership.  This approach eliminates the need for complex `get()` calls in security rules, fostering atomic operations and easier debugging.\n\nThis approach supports the required QAPs because list operations are naturally secured by the path structure.  Listing emails under `/users/{userId}/emails` will only return emails owned by that user, as enforced by security rules based on the `userId` path parameter.  Similarly, listing labels under `/users/{userId}/labels` is also secure.\n\nThere is no need for denormalization in this case because authorization is derived directly from the path."
  }
}